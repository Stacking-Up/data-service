# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**/*.md'

jobs:
  test:
    name: Lint, test and coverage to coveralls
    if: github.actor != 'StackingUpBot'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.13.0]
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies 
      run: npm ci
    - name: Check syntax
      run: npm run lint
      env:
        CI: true
    - name: Run tests
      run: npm run test:unit
      env:
        CI: true
    - name: Generate coverage report
      run: npm run coverage
      env:
        CI: true    
    - name: Coverage to Coveralls
      uses: coverallsapp/github-action@master
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
      env:
        CI: true

  migrateDB:
    name: Create migrations
    if: ${{ github.event_name == 'push'}}
    needs: test
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgresql://gh-actions:ci-password@localhost:5432/data
    services:
      data-db:
        image: postgres
        env:
          POSTGRES_PASSWORD: ci-password
          POSTGRES_USER: gh-actions
          POSTGRES_DB: data
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 16.13.0
      - name: Install dependencies 
        run: npm ci
      - name: Create migrations
        run: |
          npm run generate-schema:prod
          npx prisma migrate dev --name=${GITHUB_SHA}
      - uses: actions/upload-artifact@v3
        with:
          name: migrations
          path: prisma/migrations

  buildTest:
    name: Build and push to dockerhub using develop tag
    if: ${{ github.ref == 'refs/heads/develop'}}
    needs: migrateDB
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_PAT }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Download migrations
        uses: actions/download-artifact@v2
        with:
          name: migrations
          path: prisma/migrations
      - name: Check Git status
        id: up_to_date
        run: |
          RESULT=$(git status)
          if [[ $RESULT == *"up to date"* ]]; then
            echo "::set-output name=status::true"
          fi
      - name: Commit files
        if: ${{ !steps.up_to_date.outputs.status }}
        run: |
          git config --global user.email "101150232+StackingUpBot@users.noreply.github.com"
          git config --global user.name "StackingUpBot"
          git add .
          git commit -m "chore: Created migrations"
          git push
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: stackingup/data-service:develop
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  buildProdAndRelease:
    name: Release, build and push to dockerhub using tag version
    if: ${{ github.ref == 'refs/heads/main'}}
    needs: migrateDB
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download migrations
        uses: actions/download-artifact@v2
        with:
          name: migrations
          path: prisma/migrations
      - name: Conventional Changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GH_PAT }}
          git-user-name: StackingUpBot
          git-user-email: 101150232+StackingUpBot@users.noreply.github.com
          output-file: 'CHANGELOG.md'
          tag-prefix: 'v'
          release-count: 0
          fallback-version: '0.1.0'
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.github_token }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          release_name: ${{ steps.changelog.outputs.tag }}
          body: ${{ steps.changelog.outputs.clean_changelog }}
      - name: Sync develop with main
        uses: repo-sync/pull-request@v2
        with:
          source_branch: "main"
          destination_branch: "develop"
          pr_title: "Synchronize develop with master after release ${{ steps.changelog.outputs.tag }}"
          pr_body: ":crown:"
          pr_reviewer: "alesancor1"
          pr_assignee: "StackingUpBot"
          pr_label: "auto-pr"                              
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: stackingup/data-service:${{ steps.changelog.outputs.tag }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}